use crate::indicators::moving_averages::ma::{ma, MaData};
/// # Relative Strength Mark (RSMK)
///
/// The RSMK is a comparative momentum-based indicator. It calculates the natural log of the ratio
/// between a primary data source and a comparison data source, applies a momentum (MOM) transformation
/// over a specified lookback period, and then smooths the result with a moving average. A signal line
/// is generated by applying another moving average to the transformed output. Both the indicator and
/// the signal line are returned.
///
/// ## Parameters
/// - **lookback**: The period used for the momentum calculation. Defaults to 90.
/// - **period**: The period for the smoothing of the momentum result. Defaults to 3.
/// - **signal_period**: The period for the smoothing of the indicator line (signal line). Defaults to 20.
/// - **matype**: The MA type for the momentum smoothing (e.g., "ema", "sma", etc.). Defaults to "ema".
/// - **signal_matype**: The MA type for the signal line smoothing (e.g., "ema", "sma", etc.). Defaults to "ema".
///
/// ## Errors
/// - **EmptyData**: rsmk: One or both of the data slices are empty.
/// - **InvalidPeriod**: rsmk: One of the configured periods is zero or exceeds the data length.
/// - **NotEnoughValidData**: rsmk: Not enough valid (non-`NaN`) data points remain after the first valid index.
/// - **AllValuesNaN**: rsmk: All input or comparison data values are `NaN`.
/// - **MaError**: rsmk: MA function returned an error (e.g., invalid `ma_type`).
///
/// ## Returns
/// - **`Ok(RsmkOutput)`** on success, containing two `Vec<f64>` (`indicator` and `signal`) matching the input length,
///   with leading `NaN`s until each respective moving average window is filled.
/// - **`Err(RsmkError)`** otherwise.
use crate::utilities::data_loader::{source_type, Candles};
use std::error::Error;
use thiserror::Error;

#[derive(Debug, Clone)]
pub enum RsmkData<'a> {
    Candles {
        candles: &'a Candles,
        candles_compare: &'a Candles,
        source: &'a str,
    },
    Slices {
        main: &'a [f64],
        compare: &'a [f64],
    },
}

#[derive(Debug, Clone)]
pub struct RsmkParams {
    pub lookback: Option<usize>,
    pub period: Option<usize>,
    pub signal_period: Option<usize>,
    pub matype: Option<String>,
    pub signal_matype: Option<String>,
}

impl Default for RsmkParams {
    fn default() -> Self {
        Self {
            lookback: Some(90),
            period: Some(3),
            signal_period: Some(20),
            matype: Some("ema".to_string()),
            signal_matype: Some("ema".to_string()),
        }
    }
}

#[derive(Debug, Clone)]
pub struct RsmkInput<'a> {
    pub data: RsmkData<'a>,
    pub params: RsmkParams,
}

impl<'a> RsmkInput<'a> {
    pub fn from_candles(
        candles: &'a Candles,
        candles_compare: &'a Candles,
        source: &'a str,
        params: RsmkParams,
    ) -> Self {
        Self {
            data: RsmkData::Candles {
                candles,
                candles_compare,
                source,
            },
            params,
        }
    }

    pub fn from_slices(main: &'a [f64], compare: &'a [f64], params: RsmkParams) -> Self {
        Self {
            data: RsmkData::Slices { main, compare },
            params,
        }
    }

    pub fn with_default_candles(candles: &'a Candles, candles_compare: &'a Candles) -> Self {
        Self {
            data: RsmkData::Candles {
                candles,
                candles_compare,
                source: "close",
            },
            params: RsmkParams::default(),
        }
    }

    pub fn get_lookback(&self) -> usize {
        self.params
            .lookback
            .unwrap_or_else(|| RsmkParams::default().lookback.unwrap())
    }

    pub fn get_period(&self) -> usize {
        self.params
            .period
            .unwrap_or_else(|| RsmkParams::default().period.unwrap())
    }

    pub fn get_signal_period(&self) -> usize {
        self.params
            .signal_period
            .unwrap_or_else(|| RsmkParams::default().signal_period.unwrap())
    }

    pub fn get_ma_type(&self) -> String {
        self.params
            .matype
            .clone()
            .unwrap_or_else(|| RsmkParams::default().matype.unwrap())
    }

    pub fn get_signal_ma_type(&self) -> String {
        self.params
            .signal_matype
            .clone()
            .unwrap_or_else(|| RsmkParams::default().signal_matype.unwrap())
    }
}

#[derive(Debug, Clone)]
pub struct RsmkOutput {
    pub indicator: Vec<f64>,
    pub signal: Vec<f64>,
}

#[derive(Debug, Error)]
pub enum RsmkError {
    #[error("rsmk: Empty data provided for RSMK.")]
    EmptyData,
    #[error("rsmk: Invalid period: period = {period}, data length = {data_len}")]
    InvalidPeriod { period: usize, data_len: usize },
    #[error("rsmk: Not enough valid data: needed = {needed}, valid = {valid}")]
    NotEnoughValidData { needed: usize, valid: usize },
    #[error("rsmk: All values are NaN.")]
    AllValuesNaN,
    #[error("rsmk: Error from MA function: {0}")]
    MaError(String),
}

#[inline]
pub fn rsmk(input: &RsmkInput) -> Result<RsmkOutput, RsmkError> {
    let (main, compare) = match &input.data {
        RsmkData::Candles {
            candles,
            candles_compare,
            source,
        } => (
            source_type(candles, source),
            source_type(candles_compare, source),
        ),
        RsmkData::Slices { main, compare } => (*main, *compare),
    };

    if main.is_empty() || compare.is_empty() {
        return Err(RsmkError::EmptyData);
    }

    let lookback = input.get_lookback();
    let period = input.get_period();
    let signal_period = input.get_signal_period();

    if lookback == 0
        || period == 0
        || signal_period == 0
        || period > main.len()
        || signal_period > main.len()
        || lookback >= main.len()
    {
        return Err(RsmkError::InvalidPeriod {
            period: lookback.max(period).max(signal_period),
            data_len: main.len().min(compare.len()),
        });
    }

    let mut a = Vec::with_capacity(main.len());
    for i in 0..main.len() {
        let m = main[i];
        let c = compare[i];
        if m.is_nan() || c.is_nan() {
            a.push(f64::NAN);
        } else if c == 0.0 {
            a.push(f64::NAN);
        } else {
            a.push((m / c).ln());
        }
    }

    let first_valid_idx = match a.iter().position(|&x| !x.is_nan()) {
        Some(idx) => idx,
        None => return Err(RsmkError::AllValuesNaN),
    };

    let valid_points = a.len() - first_valid_idx;
    if valid_points < lookback.max(period).max(signal_period) {
        return Err(RsmkError::NotEnoughValidData {
            needed: lookback.max(period).max(signal_period),
            valid: valid_points,
        });
    }

    let mut b = vec![f64::NAN; a.len()];
    for i in (first_valid_idx + lookback)..a.len() {
        if a[i].is_nan() || a[i - lookback].is_nan() {
            b[i] = f64::NAN;
        } else {
            b[i] = a[i] - a[i - lookback];
        }
    }

    let main_ma_type = input.get_ma_type();
    let sig_ma_type = input.get_signal_ma_type();

    let ma_b = ma(main_ma_type.as_str(), MaData::Slice(&b), period)
        .map_err(|e| RsmkError::MaError(e.to_string()))?;

    let mut indicator = vec![f64::NAN; b.len()];
    for i in 0..b.len() {
        if i < ma_b.len() {
            indicator[i] = ma_b[i] * 100.0;
        }
    }

    let ma_signal = ma(
        sig_ma_type.as_str(),
        MaData::Slice(&indicator),
        signal_period,
    )
    .map_err(|e| RsmkError::MaError(e.to_string()))?;

    let mut signal = vec![f64::NAN; b.len()];
    for i in 0..b.len() {
        if i < ma_signal.len() {
            signal[i] = ma_signal[i];
        }
    }

    Ok(RsmkOutput { indicator, signal })
}

#[cfg(test)]
mod tests {
    use super::*;
    use crate::utilities::data_loader::read_candles_from_csv;

    #[test]
    fn test_rsmk_partial_params() {
        let file_path = "src/data/2018-09-01-2024-Bitfinex_Spot-4h.csv";
        let candles = read_candles_from_csv(file_path).expect("Failed to load test candles");
        let default_params = RsmkParams {
            lookback: None,
            period: None,
            signal_period: None,
            matype: None,
            signal_matype: None,
        };
        let input_default = RsmkInput::from_candles(&candles, &candles, "close", default_params);
        let output_default = rsmk(&input_default).expect("Failed RSMK with default params");
        assert_eq!(output_default.indicator.len(), candles.close.len());
        assert_eq!(output_default.signal.len(), candles.close.len());
        let custom_params = RsmkParams {
            lookback: Some(60),
            period: Some(5),
            signal_period: Some(10),
            matype: Some("sma".to_string()),
            signal_matype: Some("ema".to_string()),
        };
        let input_custom = RsmkInput::from_candles(&candles, &candles, "hl2", custom_params);
        let output_custom = rsmk(&input_custom).expect("Failed RSMK with custom params");
        assert_eq!(output_custom.indicator.len(), candles.close.len());
        assert_eq!(output_custom.signal.len(), candles.close.len());
    }

    #[test]
    fn test_rsmk_accuracy_same_candles() {
        let file_path = "src/data/2018-09-01-2024-Bitfinex_Spot-4h.csv";
        let candles = read_candles_from_csv(file_path).expect("Failed to load test candles");
        let params = RsmkParams {
            lookback: Some(5),
            period: Some(3),
            signal_period: Some(2),
            matype: Some("ema".to_string()),
            signal_matype: Some("ema".to_string()),
        };
        let input = RsmkInput::from_candles(&candles, &candles, "close", params);
        let rsmk_result = rsmk(&input).expect("Failed to calculate RSMK");
        assert_eq!(rsmk_result.indicator.len(), candles.close.len());
        assert_eq!(rsmk_result.signal.len(), candles.close.len());
        let len = candles.close.len();
        if len > 5 {
            for val in &rsmk_result.indicator[len - 5..] {
                assert!(
                    val.abs() < 1e-5 || val.is_nan(),
                    "Expected near-zero or NaN, got {}",
                    val
                );
            }
            for val in &rsmk_result.signal[len - 5..] {
                assert!(
                    val.abs() < 1e-5 || val.is_nan(),
                    "Expected near-zero or NaN, got {}",
                    val
                );
            }
        }
    }

    #[test]
    fn test_rsmk_with_default_candles() {
        let file_path = "src/data/2018-09-01-2024-Bitfinex_Spot-4h.csv";
        let candles = read_candles_from_csv(file_path).expect("Failed to load test candles");
        let input = RsmkInput::with_default_candles(&candles, &candles);
        let rsmk_result = rsmk(&input).expect("Failed to calculate default RSMK");
        assert_eq!(rsmk_result.indicator.len(), candles.close.len());
        assert_eq!(rsmk_result.signal.len(), candles.close.len());
    }

    #[test]
    fn test_rsmk_zero_periods() {
        let input_data = [10.0, 11.0, 12.0];
        let params = RsmkParams {
            lookback: Some(0),
            period: Some(0),
            signal_period: Some(0),
            matype: Some("ema".to_string()),
            signal_matype: Some("ema".to_string()),
        };
        let input = RsmkInput::from_slices(&input_data, &input_data, params);
        let result = rsmk(&input);
        assert!(result.is_err());
        if let Err(e) = result {
            assert!(
                e.to_string().contains("Invalid period"),
                "Expected 'Invalid period', got: {}",
                e
            );
        }
    }

    #[test]
    fn test_rsmk_very_small_data_set() {
        let input_data = [42.0];
        let params = RsmkParams::default();
        let input = RsmkInput::from_slices(&input_data, &input_data, params);
        let result = rsmk(&input);
        assert!(result.is_err());
    }

    #[test]
    fn test_rsmk_all_nan() {
        let input_data = [f64::NAN, f64::NAN, f64::NAN];
        let params = RsmkParams::default();
        let input = RsmkInput::from_slices(&input_data, &input_data, params);
        let result = rsmk(&input);
        assert!(result.is_err());
    }

    #[test]
    fn test_rsmk_not_enough_valid_data() {
        let input_data = [f64::NAN, 10.0, 20.0, 30.0];
        let params = RsmkParams {
            lookback: Some(3),
            period: Some(3),
            signal_period: Some(3),
            matype: Some("ema".to_string()),
            signal_matype: Some("ema".to_string()),
        };
        let input = RsmkInput::from_slices(&input_data, &input_data, params);
        let result = rsmk(&input);
        assert!(result.is_err());
    }

    #[test]
    fn test_rsmk_ma_error() {
        let input_data = [10.0, 11.0, 12.0, 13.0, 14.0, 15.0];
        let params = RsmkParams {
            lookback: Some(2),
            period: Some(3),
            signal_period: Some(3),
            matype: Some("nonexistent_ma".to_string()),
            signal_matype: Some("ema".to_string()),
        };
        let input = RsmkInput::from_slices(&input_data, &input_data, params);
        let result = rsmk(&input);
        assert!(result.is_err());
    }

    #[test]
    fn test_rsmk_accuracy() {
        let file_path = "src/data/2018-09-01-2024-Bitfinex_Spot-4h.csv";
        let candles = read_candles_from_csv(file_path).expect("Failed to load test candles");
        let close_prices = candles
            .select_candle_field("close")
            .expect("Failed to extract close prices");

        let params = RsmkParams::default();
        let input = RsmkInput::from_candles(&candles, &candles, "close", params.clone());
        let rsmk_result = rsmk(&input).expect("Failed to calculate RSMK");

        assert_eq!(
            rsmk_result.indicator.len(),
            close_prices.len(),
            "RSMK indicator length mismatch"
        );
        assert_eq!(
            rsmk_result.signal.len(),
            close_prices.len(),
            "RSMK signal length mismatch"
        );

        let expected_last_five = [0.0, 0.0, 0.0, 0.0, 0.0];
        assert!(
            rsmk_result.indicator.len() >= 5,
            "RSMK output length too short"
        );
        let start_index = rsmk_result.indicator.len() - 5;

        let result_last_five_indicator = &rsmk_result.indicator[start_index..];
        for (i, &value) in result_last_five_indicator.iter().enumerate() {
            let expected_value = expected_last_five[i];
            assert!(
                (value - expected_value).abs() < 1e-1,
                "RSMK indicator mismatch at index {}: expected {}, got {}",
                i,
                expected_value,
                value
            );
        }

        let result_last_five_signal = &rsmk_result.signal[start_index..];
        for (i, &value) in result_last_five_signal.iter().enumerate() {
            let expected_value = expected_last_five[i];
            assert!(
                (value - expected_value).abs() < 1e-1,
                "RSMK signal mismatch at index {}: expected {}, got {}",
                i,
                expected_value,
                value
            );
        }

        let max_period = params
            .lookback
            .unwrap()
            .max(params.period.unwrap())
            .max(params.signal_period.unwrap());
        for i in 0..max_period {
            if i < rsmk_result.indicator.len() {
                assert!(
                    rsmk_result.indicator[i].is_nan(),
                    "Expected indicator NaN at index {}, got {}",
                    i,
                    rsmk_result.indicator[i]
                );
            }
            if i < rsmk_result.signal.len() {
                assert!(
                    rsmk_result.signal[i].is_nan(),
                    "Expected signal NaN at index {}, got {}",
                    i,
                    rsmk_result.signal[i]
                );
            }
        }
    }
}
